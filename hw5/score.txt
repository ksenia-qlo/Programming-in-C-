.
..
cntSort
cntSort.c
cntSort.o
main.c
readMe.txt
score.txt
-----
icc -Wall -c cntSort.c
-----
icc -Wall cntSort.c main.c -o cntSort
-----
./cntSort
m 64, n 1048576, seed 2019
quicksort takes 76.00 msec
cntSort takes 2.00 msec
-----
cat readMe.txt
a. Pair of m and n such that counting sort is faster than quicksort

The pair when counting sourt if faster is the example from the
test command from our assignment:  -m 64 -n 1048576 

b. Part of m and n such that counting sort is slower than quicksort

The pair when counting sourt is slower than quickSort is
when m is a big number and it is larger than n, example:
-m 99999999 -n 100000

c. Observations:
   I tested around a hundred cases with m and n of different values.
   I saw that in the case when m is smaller than n as per assignment's
   requirement, the counting sort will still outperform the quicksort
   even if the the values of m is extra high but is still smaller than
   n.
   When values of m and n are small, there is not difference in
   milliseconds, both algorithms are very fast.
   
   However, when m gets larger than n, quicksort outperforms the
   counting sort. This happens because the difference between
   the smallest and largest number in the array becomes large.
   It is logical when we consider cases for sorts:
   quicksort's worst case is O(n^2) while average case is O(nlogn)
   cntSort's is O(n+m) so it is linear given that m is less than n.
   But when it is not, m > n and numbers are large, and the closer to
   each other m and n are, the closer the performance of cntSort
   comes to quadratic.  
   
   Another case that stood out was when the m is still large but
   n is much much smaller than m, let's say 2. In this case quicksort
   takes almost no time while cntSort takes significant time.

   
  
>ssss>
-----
-----
    (10)1. (10 points)
    Yes (a) Existence of the directory /home/user??/hw5
    Yes (b) Inside hw5: cntSort.c, main.c, and readMe.txt
    Yes (c) Other files are allowed
    
    (40)2. (40 points) cntSort.c
    Yes (a) Adherence to the style guidelines
    Yes (b) Sensible pseudo code, variable names, comments, etc.
    Yes (c) icc -Wall -c cntSort.c gives no warnings or errors
    Yes (d) ./cntSort produces correct output
    
    (10)3. (10 points) main.c
    Yes (a) Comments at the beginning of the file
    Yes (b) icc -Wall cntSort.c main.c -o cntSort gives no warnings or errors
    
    (40)4. (40 points) readMe.txt
    Yes (a) A pair of m and n such that counting sort is faster than quicksort
    Yes (b) Another pair such that quicksort is faster than counting sort
    Yes (c) Discussion (at least a paragraph in length): what have you learned 
	from the results?
    (30)(d) At the TAÂ’s discretion, excellent discussion will receive extra
        credit
	Well organized discussion.

Total: 130
